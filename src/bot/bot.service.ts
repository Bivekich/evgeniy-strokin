import { Injectable, OnModuleInit } from '@nestjs/common';
import { OrderService } from '../order/order.service';
import { ContactService } from '../contact/contact.service';
import { FaqService } from '../faq/faq.service';
import { UserService } from '../user/user.service';
import { EventService } from '../event/event.service';
import * as TelegramBot from 'node-telegram-bot-api';
import { Order } from '../order/order.entity';
import { Contact } from '../contact/contact.entity';
import { FAQ } from '../faq/faq.entity';
import { Event } from '../event/event.entity';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: TelegramBot;
  private adminId = '5379725422';

  constructor(
    private readonly orderService: OrderService,
    private readonly contactService: ContactService,
    private readonly faqService: FaqService,
    private readonly userService: UserService,
    private readonly eventService: EventService,
  ) {
    this.bot = new TelegramBot(
      '7181823098:AAEOnOvEhPSYyF3Pu6GnVN0PeO16qDQedbc',
      { polling: true },
    );
  }

  onModuleInit() {
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      const menu = {
        reply_markup: {
          keyboard: [
            [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' }],
            [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã' }, { text: '‚ùì –í–æ–ø—Ä–æ—Å-–û—Ç–≤–µ—Ç' }],
            [{ text: 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' }, { text: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π' }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      };
      this.bot.sendMessage(chatId, 'üëã *–ü—Ä–∏–≤–µ—Ç! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?*', {
        parse_mode: 'Markdown',
        ...menu,
      });
    });

    this.bot.onText(/üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑/, (msg) => {
      this.bot.sendMessage(
        msg.chat.id,
        'üìù *–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* \n`–∏–º—è, email, –ø—Ä–æ–¥—É–∫—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`',
        { parse_mode: 'Markdown' },
      );
    });

    this.bot.onText(/üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã/, async (msg) => {
      const contacts = await this.contactService.findAll();
      const response = contacts
        .map((contact) => `üîπ *${contact.title}*: ${contact.value}`)
        .join('\n');
      this.bot.sendMessage(msg.chat.id, response || '–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.', {
        parse_mode: 'Markdown',
      });
    });

    this.bot.onText(/‚ùì –í–æ–ø—Ä–æ—Å-–û—Ç–≤–µ—Ç/, async (msg) => {
      const faqs = await this.faqService.findAll();
      const response = faqs
        .map((faq) => `‚ùì *${faq.question}*\nüí¨ ${faq.answer}`)
        .join('\n\n');
      this.bot.sendMessage(
        msg.chat.id,
        response || '–ù–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.',
        { parse_mode: 'Markdown' },
      );
    });

    this.bot.onText(/üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç/, async (msg) => {
      const users = await this.userService.findAll();
      const user = users.find((u) => u.telegramId === msg.from.id.toString());
      if (user) {
        this.bot.sendMessage(
          msg.chat.id,
          `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n*–ò–º—è:* ${user.name}\n*Email:* ${user.email}`,
          { parse_mode: 'Markdown' },
        );
      } else {
        this.bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
          parse_mode: 'Markdown',
        });
      }
    });

    this.bot.onText(/üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π/, async (msg) => {
      const events = await this.eventService.findAll();
      const response = events
        .map(
          (event) =>
            `üìÖ *${event.title}*\nüìù ${event.description}\nüìÜ *–î–∞—Ç–∞:* ${event.date}`,
        )
        .join('\n\n');
      this.bot.sendMessage(msg.chat.id, response || '–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.', {
        parse_mode: 'Markdown',
      });
    });

    this.bot.onText(/\/admin/, (msg) => {
      if (msg.from.id.toString() === this.adminId) {
        const adminMenu = {
          reply_markup: {
            keyboard: [
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç' }],
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å' }],
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥' }],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        };
        this.bot.sendMessage(msg.chat.id, 'üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*', {
          parse_mode: 'Markdown',
          ...adminMenu,
        });
      } else {
        this.bot.sendMessage(
          msg.chat.id,
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.',
          { parse_mode: 'Markdown' },
        );
      }
    });

    // Admin panel options
    this.bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç/, (msg) => {
      if (msg.from.id.toString() === this.adminId) {
        this.bot.sendMessage(
          msg.chat.id,
          '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∑–Ω–∞—á–µ–Ω–∏–µ.',
          { parse_mode: 'Markdown' },
        );
        this.bot.once('message', async (msg) => {
          const [title, value] = msg.text.split(', ');
          if (title && value) {
            const contact = new Contact();
            contact.title = title;
            contact.value = value;
            await this.contactService.create(contact);
            this.bot.sendMessage(msg.chat.id, '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.', {
              parse_mode: 'Markdown',
            });
          } else {
            this.bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.', {
              parse_mode: 'Markdown',
            });
          }
        });
      }
    });

    this.bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å/, (msg) => {
      if (msg.from.id.toString() === this.adminId) {
        this.bot.sendMessage(
          msg.chat.id,
          '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç.',
          { parse_mode: 'Markdown' },
        );
        this.bot.once('message', async (msg) => {
          const [question, answer] = msg.text.split(', ');
          if (question && answer) {
            const faq = new FAQ();
            faq.question = question;
            faq.answer = answer;
            await this.faqService.create(faq);
            this.bot.sendMessage(msg.chat.id, '‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.', {
              parse_mode: 'Markdown',
            });
          } else {
            this.bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.', {
              parse_mode: 'Markdown',
            });
          }
        });
      }
    });

    this.bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ/, (msg) => {
      if (msg.from.id.toString() === this.adminId) {
        this.bot.sendMessage(
          msg.chat.id,
          '–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞.',
          { parse_mode: 'Markdown' },
        );
        this.bot.once('message', async (msg) => {
          const [title, description, date] = msg.text.split(', ');
          if (title && description && date) {
            const event = new Event();
            event.title = title;
            event.description = description;
            event.date = date;
            await this.eventService.create(event);
            this.bot.sendMessage(msg.chat.id, '‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.', {
              parse_mode: 'Markdown',
            });
          } else {
            this.bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.', {
              parse_mode: 'Markdown',
            });
          }
        });
      }
    });

    this.bot.on('message', async (msg) => {
      if (msg.text.startsWith('/')) return;
      const text = msg.text;
      const [name, email, product] = text.split(', ');

      if (name && email && product) {
        const order = new Order();
        order.name = name;
        order.email = email;
        order.product = product;
        await this.orderService.create(order);
        this.bot.sendMessage(msg.chat.id, '‚úÖ *–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç.*', {
          parse_mode: 'Markdown',
        });
      }
    });
  }
}
